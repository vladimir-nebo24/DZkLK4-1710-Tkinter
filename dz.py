import tkinter as tk
from tkinter import filedialog, messagebox


class UserProfileTkinter:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - Tkinter")
        self.root.geometry("450x600")
        self.root.minsize(400, 500)
        self.root.configure(bg='#f8f9fa')

        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.avatar_photo = None
        self.upload_btn = None

        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.create_scrollable_frame()
        self.setup_main_window()

    def create_scrollable_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        self.canvas = tk.Canvas(self.root, bg='#f8f9fa', highlightthickness=0)
        self.canvas.pack(fill=tk.BOTH, expand=True)

        self.main_frame = tk.Frame(self.canvas, bg='#f8f9fa')
        self.canvas_window = self.canvas.create_window((0, 0), window=self.main_frame, anchor="nw")

        self.main_frame.bind("<Configure>", self._on_frame_configure)
        self.canvas.bind("<Configure>", self._on_canvas_configure)
        self.canvas.bind_all("<MouseWheel>", self._on_mousewheel)

    def _on_frame_configure(self, event):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def _on_canvas_configure(self, event):
        self.canvas.itemconfig(self.canvas_window, width=event.width)

    def _on_mousewheel(self, event):
        self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")

    def setup_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        self.create_header_section()
        self.create_profile_section()

    def create_header_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º"""
        header_frame = tk.Frame(self.main_frame, bg='#667eea', height=180)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        center_frame = tk.Frame(header_frame, bg='#667eea')
        center_frame.place(relx=0.5, rely=0.5, anchor='center')

        # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        self.create_avatar_section(center_frame)

    def create_avatar_section(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"""
        self.avatar_container = tk.Frame(parent, bg='#667eea')
        self.avatar_container.pack()

        self.avatar_canvas = tk.Canvas(self.avatar_container, width=120, height=120,
                                       bg='#667eea', highlightthickness=0,
                                       cursor='hand2')
        self.avatar_canvas.pack()

        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.create_default_avatar()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.upload_btn = tk.Label(self.avatar_container, text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ",
                                   font=('Arial', 9, 'bold'), bg='white', fg='#667eea',
                                   relief='raised', bd=1, padx=8, pady=3,
                                   cursor='hand2')

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.avatar_canvas.bind("<Enter>", self._on_avatar_enter)
        self.avatar_canvas.bind("<Leave>", self._on_avatar_leave)
        self.avatar_canvas.bind("<Button-1>", self.upload_photo)

        self.upload_btn.bind("<Enter>", self._on_button_enter)
        self.upload_btn.bind("<Leave>", self._on_avatar_leave)
        self.upload_btn.bind("<Button-1>", self.upload_photo)

    def _on_avatar_enter(self, event):
        """–ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É"""
        self.upload_btn.pack(pady=(8, 0))
        self.avatar_canvas.create_rectangle(0, 0, 120, 120, fill='black', stipple='gray50', tags='overlay')

    def _on_button_enter(self, event):
        """–ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - –º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å"""
        self.upload_btn.configure(bg='#f0f0f0', relief='sunken')

    def _on_avatar_leave(self, event):
        """–ü—Ä–∏ —É—Ö–æ–¥–µ —Å –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ - —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É"""
        x, y = self.avatar_container.winfo_pointerxy()
        widget = self.avatar_container.winfo_containing(x, y)

        if widget not in [self.avatar_canvas, self.upload_btn]:
            self.upload_btn.pack_forget()
            self.avatar_canvas.delete('overlay')

    def create_default_avatar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.avatar_canvas.delete("all")
        self.avatar_canvas.create_oval(10, 10, 110, 110, fill='#e74c3c', outline='white', width=4)
        self.avatar_canvas.create_text(60, 60, text="–í–ù", fill='white',
                                       font=('Arial', 24, 'bold'))

    def upload_photo(self, event=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tkinter.PhotoImage"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
                filetypes=[
                    ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg *.jpeg *.png *.bmp *.gif"),
                    ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
                ]
            )

            if file_path:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é tkinter
                self.avatar_photo = tk.PhotoImage(file=file_path)

                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                width = self.avatar_photo.width()
                height = self.avatar_photo.height()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                scale = min(100 / width, 100 / height)
                new_width = int(width * scale)
                new_height = int(height * scale)

                # –°–æ–∑–¥–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.avatar_photo = self.avatar_photo.subsample(
                    max(1, width // new_width),
                    max(1, height // new_height)
                )

                # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –∫—Ä—É–≥–µ
                self.avatar_canvas.delete("all")

                # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É (—Ä–∏—Å—É–µ–º –∫—Ä—É–≥)
                self.avatar_canvas.create_oval(10, 10, 110, 110, fill='#667eea', outline='white', width=4)

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ –ø–æ–≤–µ—Ä—Ö –∫—Ä—É–≥–∞ (–±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞)
                self.avatar_canvas.create_image(60, 60, image=self.avatar_photo)

                # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                self.upload_btn.pack_forget()
                self.avatar_canvas.delete('overlay')

                messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GIF –∏–ª–∏ PGM")

    def create_profile_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        content_frame = tk.Frame(self.main_frame, bg='white')
        content_frame.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)

        tk.Frame(content_frame, height=30, bg='white').pack()

        name_label = tk.Label(content_frame, text="–í–ª–∞–¥–∏–º–∏—Ä –ù–µ–±–æ–≥–∞—Ç–∏–∫–æ–≤",
                              font=('Arial', 22, 'bold'), fg='#2c3e50', bg='white')
        name_label.pack(pady=(0, 5))

        position_label = tk.Label(content_frame, text="–°—Ç—É–¥–µ–Ω—Ç 2 –∫—É—Ä—Å–∞",
                                  font=('Arial', 14), fg='#7f8c8d', bg='white')
        position_label.pack(pady=(0, 25))

        self.create_separator(content_frame)

        self.create_info_section(content_frame, "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
                                 "–£—Ä–æ–∂–µ–Ω–µ—Ü –≥–æ—Ä–æ–¥–∞ –©—ë–ª–∫–æ–≤–æ. –°–µ–π—á–∞—Å —É—á—É—Å—å –≤ –ú–ê–ò –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ '–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞'. –£–≤–ª–µ–∫–∞—é—Å—å UFC, —Ñ—É—Ç–±–æ–ª–æ–º, –±–∞—Å–∫–µ—Ç–±–æ–ª–æ–º. –ò–º–µ—é —Ä–µ–ª—å–µ—Ñ–Ω—ã–π –ø—Ä–µ—Å—Å.")

        self.create_separator(content_frame)

        self.create_info_section(content_frame, "–ù–∞–≤—ã–∫–∏", "Python, MySQL")

        self.create_separator(content_frame)

        self.create_experience_section(content_frame)

        tk.Frame(content_frame, height=30, bg='white').pack()

    def create_separator(self, parent):
        separator = tk.Frame(parent, height=1, bg='#ecf0f1')
        separator.pack(fill=tk.X, padx=30, pady=20)

    def create_info_section(self, parent, title, content):
        section_frame = tk.Frame(parent, bg='white')
        section_frame.pack(fill=tk.X, padx=30, pady=0)

        title_label = tk.Label(section_frame, text=title,
                               font=('Arial', 16, 'bold'), fg='#2c3e50',
                               bg='white', anchor='w')
        title_label.pack(fill=tk.X, pady=(0, 10))

        content_label = tk.Label(section_frame, text=content,
                                 font=('Arial', 12), fg='#34495e', bg='white',
                                 justify='left', wraplength=380, anchor='w')
        content_label.pack(fill=tk.X)

        def update_wraplength(event=None):
            new_width = parent.winfo_width() - 60
            content_label.configure(wraplength=max(300, new_width))

        parent.bind('<Configure>', update_wraplength)

    def create_experience_section(self, parent):
        section_frame = tk.Frame(parent, bg='white')
        section_frame.pack(fill=tk.X, padx=30, pady=0)

        title_label = tk.Label(section_frame, text="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                               font=('Arial', 16, 'bold'), fg='#2c3e50',
                               bg='white', anchor='w')
        title_label.pack(fill=tk.X, pady=(0, 20))

        exp1_frame = tk.Frame(section_frame, bg='white')
        exp1_frame.pack(fill=tk.X, pady=(0, 20))

        exp1_title = tk.Label(exp1_frame, text="–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–π",
                              font=('Arial', 13, 'bold'), fg='#2c3e50', bg='white', anchor='w',
                              wraplength=380, justify='left')
        exp1_title.pack(fill=tk.X)

        exp1_company = tk.Label(exp1_frame, text="–û–û–û '–î—è–¥—è –†–∞—Ñ–∏–∫'",
                                font=('Arial', 12), fg='#3498db', bg='white', anchor='w')
        exp1_company.pack(fill=tk.X, pady=(5, 0))

        exp1_period = tk.Label(exp1_frame, text="–õ–µ—Ç–æ 2023",
                               font=('Arial', 11), fg='#7f8c8d', bg='white', anchor='w')
        exp1_period.pack(fill=tk.X, pady=(2, 0))

        exp2_frame = tk.Frame(section_frame, bg='white')
        exp2_frame.pack(fill=tk.X, pady=(0, 10))

        exp2_title = tk.Label(exp2_frame, text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä",
                              font=('Arial', 13, 'bold'), fg='#2c3e50', bg='white', anchor='w')
        exp2_title.pack(fill=tk.X)

        exp2_company = tk.Label(exp2_frame, text="–£ –±–∞—Ç–∏",
                                font=('Arial', 12), fg='#3498db', bg='white', anchor='w')
        exp2_company.pack(fill=tk.X, pady=(5, 0))

        exp2_period = tk.Label(exp2_frame, text="–ò—é–Ω—å 2025 - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è",
                               font=('Arial', 11), fg='#7f8c8d', bg='white', anchor='w')
        exp2_period.pack(fill=tk.X, pady=(2, 0))

        def update_exp_wraplength(event=None):
            new_width = section_frame.winfo_width() - 60
            exp1_title.configure(wraplength=max(300, new_width))

        section_frame.bind('<Configure>', update_exp_wraplength)

    def run(self):
        self.root.mainloop()


if __name__ == '__main__':
    app = UserProfileTkinter()
    app.run()